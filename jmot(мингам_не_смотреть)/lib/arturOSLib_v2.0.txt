@name lib/arturOSLib_v2.0

#forceError
#addProgramInChip
#isModuleValid

if(first()){
    #noDuplications()
    
    if(0){
    CLK = TRGCLK = TRGRES = GetCode = CurretVersion = ""
    CLKARG = TRGARG = array()
    Data = ChipData = table()
    Save = gTable("")
    EGP = wirelink()
    CLKID = 0}
    
    function void errorExit(STRING:string){
        Data["loaded",number] = 0
        Data["IsCrash",number] = 1
        Save["loadingStatus_"+owner():id(),table] = table()
        
        EGP:egpClear()
        
        EGP:egpBox(1,vec2(256,256),vec2(512,512))
        EGP:egpColor(1,vec(0,0,170))
        
        EGP:egpRoundedBox(2,vec2(256,64),vec2(170,50))
        EGP:egpColor(2,vec(170,168,172))
        EGP:egpRadius(2,5)
        
        EGP:egpText(3,"=arturOS=",vec2(256,45))
        EGP:egpColor(3,vec(255,255,255))
        EGP:egpSize(3,33)
        EGP:egpAlign(3,1)
        
        EGP:egpText(4,"АХАХАХА ТВОЯ СИСТЕМА ЕБАНАЯ НЕ ВЫДЕРЖАЛА НАГРУЗКУ!!!",vec2(256,120))
        EGP:egpColor(4,vec(255,255,255))
        EGP:egpSize(4,18)
        EGP:egpAlign(4,1)
        
        EGP:egpText(5,"ВРЕМЯ ПЕРЕУСТАНАВЛИВАТЬ arturOS !!!",vec2(256,160))
        EGP:egpColor(5,vec(255,255,255))
        EGP:egpSize(5,25)
        EGP:egpAlign(5,1)
        
        EGP:egpText(6,"Press RESTART to restart your computer.",vec2(256,256))
        EGP:egpColor(6,vec(255,255,255))
        EGP:egpSize(6,20)
        EGP:egpAlign(6,1)
        
        EGP:egpText(7,"ERROR: "+STRING,vec2(256,350))
        EGP:egpColor(7,vec(255,255,255))
        EGP:egpSize(7,20)
        EGP:egpAlign(7,1)
        
        EGP:egpText(8,"Синий экран придумал: GiPNoZ",vec2(10,495))
        EGP:egpColor(8,vec(255,255,255))
        EGP:egpSize(8,14)
        EGP:egpAlign(8,0)
        
        exit()
    }
    
    function number string:in_array(Array_lib:array){
        foreach(K_lib,S_lib:string = Array_lib){
            if(S_lib == This){
                return 1
            }
        }
        return 0
    }
    
    function void check(){
        if(!perf(90)){
            errorExit("Critical_Error: your pentium is out of date")
        }
    }
    
    function number isFuncValid(Func:string){
        local Code = getCodeIncludes()
        
        Code["[arturka_main]",string] = GetCode
        
        foreach(K,S:string = Code){
            if(S:matchFirst("function[%s]+[%S]*[%s]+"+Func+"%(")){
                return 1
            }
        }
        return 0
    }
    
    function number isModuleValid(Module:string){
        local Code = getCodeIncludes()
        
        Code["[arturka_main]",string] = GetCode

        foreach(K,S:string = Code){
            if(S:matchFirst("#include \"module/"+Module+"\"")){
                return 1
            }
        }
        return 0
    }
    
    function void addProgramInChip(T:table){
        if(first()){ errorExit("Imposible load code in chip") }
        
        foreach(K,Module:string = T){
            T:unset(K)
            T["module/"+K,string] = Module
        }
        
        local Code = getCodeIncludes():add(T)
        local Include = ""
        
        foreach(K,S:string = T){
            Include = Include+"#include \""+K+"\"\n"
        }
        
        entity():remoteSetCode(GetCode:replace("#[autoInclude]#","#[autoInclude]#\n"+Include),Code)
    }
    
    function table getOrders(){
        local Windows = Data["Windows",table]:clone()
        local Orders = array()
        local Return = table()
        local PreReturn = table()
        
        foreach(K:number,Win:table = Windows){
            Orders[K,number] = Win["Order",number]
        }
        
        foreach(K,N:number = Orders){
            if(!PreReturn[N,array]:count()){ PreReturn[N,array] = array() }
            PreReturn[N,array]:pushNumber(K)
        }
        
        foreach(K,N:number = PreReturn:keys()){
            local Min = PreReturn:keys():min()
            
            Return:pushArray(PreReturn[Min,array])
            PreReturn:unset(Min)
        }
        
        return Return
    }
    
    function void setFocus(ID){
        local Focus = Data["MaxFocus",number]+1
        
        Data["Windows",table][ID,table]["Order",number] = Focus
        Data["MaxFocus",number] = Focus
    }
    
    function void egpParent(ID){
        local Object = Data["Windows",table][ID,table]
        
        foreach(K:number,A:array = Object){
            switch(A[1,string]){
                case "box",
                case "triangle",
                case "cir", if(A[7,number]){ EGP:egpParent(A[2,number],Object[A[7,number],array][2,number]) } break
                case "rbox",
                case "boxo",
                case "ciro",
                case "text", if(A[8,number]){ EGP:egpParent(A[2,number],Object[A[8,number],array][2,number]) } break
                case "rboxo", if(A[9,number]){ EGP:egpParent(A[2,number],Object[A[9,number],array][2,number]) } break
            }
        }
    }
    
    function number getParent(ID,Index){
        local Object = Data["Windows",table][ID,table][Index,array]
        
        switch(Object[1,string]){
            case "box",
            case "triangle",
            case "cir", return Object[7,number] break
            case "rbox",
            case "boxo",
            case "ciro",
            case "text", return Object[8,number] break
            case "rboxo", return Object[9,number] break
        }
        
        errorExit("getParent_noFind_class_object:"+Object[1,string])
    }
    
    function void egpRender(){
        EGP:egpClear()
        
        local Orders = getOrders()
        
        foreach(K:number,Windows:array = Orders){
            for(I=1,Windows:count()){
                local Index = Windows:minIndex()
                local ID = Windows[Index,number]
                
                Windows:unset(Index)
                
                foreach(K:number,A:array = Data["Windows",table][ID,table]){
                    check()
                    
                    switch(A[1,string]){
                        case "box",
                        EGP:egpBox(A[2,number],A[3,vector2],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpMaterial(A[2,number],A[6,string]) break
                        
                        case "rbox",
                        EGP:egpRoundedBox(A[2,number],A[3,vector2],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpRadius(A[2,number],A[6,number])
                        EGP:egpMaterial(A[2,number],A[7,string]) break
                        
                        case "boxo",
                        EGP:egpBoxOutline(A[2,number],A[3,vector2],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpSize(A[2,number],A[6,number])
                        EGP:egpMaterial(A[2,number],A[7,string]) break
                        
                        case "rboxo",
                        EGP:egpRoundedBoxOutline(A[2,number],A[3,vector2],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpRadius(A[2,number],A[6,number])
                        EGP:egpSize(A[2,number],A[7,number])
                        EGP:egpMaterial(A[2,number],A[8,string]) break
                        
                        case "cir",
                        EGP:egpCircle(A[2,number],A[3,vector2],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpMaterial(A[2,number],A[6,string]) break
                        
                        case "ciro",
                        EGP:egpCircleOutline(A[2,number],A[3,vector2],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpSize(A[2,number],A[6,number])
                        EGP:egpMaterial(A[2,number],A[7,string]) break
                        
                        case "text",
                        EGP:egpText(A[2,number],A[3,string],A[4,vector2])
                        EGP:egpColor(A[2,number],A[5,vector4])
                        EGP:egpSize(A[2,number],A[6,number])
                        EGP:egpAlign(A[2,number],A[7,number]) break
                        
                        case "triangle",
                        EGP:egpTriangle(A[2,number],A[3,vector2],A[4,vector2],A[5,vector2])
                        EGP:egpColor(A[2,number],A[6,vector4]) break
                    }
                }
                egpParent(ID)
            }
        }
    }
    
    function number windowCreate(){
        
        local BlockedWindows = Data["BlockedWindowID",array]
        local ID = BlockedWindows:minIndex()
        
        if(BlockedWindows[ID,number] != 0){ errorExit("window limit exceeded") }
        
        BlockedWindows[ID,number] = 1
        
        
        #if(!Data["Windows",table][ID,table]:count()){
        local Windows = Data["Windows",table]
        
        Windows[ID,table] = table()
        Windows[ID,table]["ID",number] = ID
        Windows[ID,table]["Order",number] = 1
        Data["DataWindows",table][ID,table] = table()
        
        return ID
        #}else{
        #    errorExit("Failed to create window")
        #}
    }
    
    function number objectCreate(ID,Arg:array){
        check()
        
        if(!Data["Windows",table][ID,table]:count()){ errorExit("No valid Windows ID: "+ID) }
        
        local Object = Data["Windows",table][ID,table]
        local BlockedObject = Data["BlockedObjectID",array]
        local INDEX = BlockedObject:minIndex()
        local Index = Arg[2,number]
        
        if(BlockedObject[INDEX,number] != 0){ errorExit("Video memory is full") }
        
        BlockedObject[INDEX,number] = 1
        Arg[2,number] = INDEX
        
        switch(Arg[1,string]){
            case "box",
            case "rbox",
            case "boxo",
            case "rboxo",
            case "cir",
            case "ciro",
            case "text",
            case "triangle", Object[Index,array] = Arg break
            default, errorExit("Unknown Type \""+Arg[1,string]+"\"") break
        }
        
        #if(Arg[2,number] < 1 | Arg[2,number] > egpMaxObjects()){ errorExit("Object out of range \""+Arg[1,string]+"\"") }
        
        #BOX array(Type,Index,DefPos,DefSize,DefCol,DefMat,Parent)
        #RBOX array(Type,Index,DefPos,DefSize,DefCol,DefRad,DefMat,Parent)
        #BOXO array(Type,Index,DefPos,DefSize,DefCol,DefTol,DefMat,Parent)
        #RBOXO array(Type,Index,DefPos,DefSize,DefCol,DefRad,DefTol,DefMat,Parent)
        #CIR array(Type,Index,DefPos,DefSize,DefCol,DefMat,Parent)
        #CIRO array(Type,Index,DefPos,DefSize,DefCol,DefTol,DefMat,Parent)
        #TEXT array(Type,Index,DefText,DefPos,DefCol,DefSizeN,DefAlg,Parent)
        #TRIANGLE array(Type,Index,Triangle1,Triangle2,Triangle3,DefCol,Parent)
        
        return INDEX #Object:ncount()
    }
    
    function number objectDelete(ID,Index){
        check()
        
        if(!Data["Windows",table][ID,table]:count()){ errorExit("No valid Windows ID: "+ID) }
        
        Data["Windows",table][ID,table]:unset(Index)
        Data["BlockedObjectID",array][Index,number] = 0
        
        return 1
    }
    
    function number windowDelete(ID){
        if(!Data["Windows",table][ID,table]:count()){ return 0 }
        
        local BlockedObject = Data["BlockedObjectID",array]
        local BlockedWindows = Data["BlockedWindowID",array]
        
        foreach(K:number,Object:array = Data["Windows",table][ID,table]){
            local ID = Object[2,number]
            
            BlockedObject[ID,number] = 0
        }
        
        Data["Windows",table]:unset(ID)
        Data["Triggers",table]:unset(ID)
        Data["DataWindows",table]:unset(ID)
        
        BlockedWindows[ID,number] = 0
        
        return 1
    }
    
    function void addTrigger(ID,Array:array){
        if(!Data["Triggers",table][ID,table]:count()){ Data["Triggers",table][ID,table] = table() }
        
        Data["Triggers",table][ID,table]:pushArray(Array:clone())
    }
    
    function void addLink(OBJ:array,App:string){
        local Table = Data["desktop",table]
        local Count = Table:count()
        
        if(!Count){ Data["desktop",table] = table() }
        
        OBJ[2,number] = 100+Count
        
        Data["desktop",table]:pushTable(table(OBJ,App))
    }
    
    function number forceError(String:string){
        local ID = windowCreate()
        
        Data["Windows",table][ID,table]["Order",number] = inf()
        
        objectCreate(ID,array("rbox",1,vec2(256),vec2(150,75),vec4(255),5))
        objectCreate(ID,array("box",2,vec2(60,-25),vec2(15,15),vec4(255),"gui/close_32",1))
        objectCreate(ID,array("rbox",3,vec2(0,25),vec2(90,15),vec4(127,127,127,255),5,"",1))
        objectCreate(ID,array("text",4,"ОК",vec2(0,17),vec4(255),14,1,1))
        objectCreate(ID,array("text",5,String,vec2(0,-15),vec4(0,0,0,255),14,1,1))
        
        addTrigger(ID,array(1,"OSAPI:move"))
        addTrigger(ID,array(2,"OSAPI:close"))
        addTrigger(ID,array(3,"OSAPI:close"))
        
        egpRender()
        
        EGP:entity():soundPlay(randint(1,1000),1,"buttons/button4.wav")
        
        return ID
    }
    
    function void load(){
        local ID = windowCreate()
        local LData = Data["DataWindows",table][ID,table]
        local Load_A_Text = array("arturOS",
                                  "LOADING....",
                                  "VER: "+CurretVersion,
                                  "Дизайн: артурка",
                                  "loading 'none'...")
        
        objectCreate(ID,array("box",1,vec2(256),vec2(512),vec4(50,50,50,255)))
        objectCreate(ID,array("boxo",2,vec2(256,300),vec2(400,25),vec4(255),3))
        LData["PBId",number] = objectCreate(ID,array("box",3,vec2(256,300),vec2(400,25),vec4(255)))
        objectCreate(ID,array("text",4,Load_A_Text[1,string],vec2(256,75),vec4(255),80,1))
        objectCreate(ID,array("text",5,Load_A_Text[2,string],vec2(56,245),vec4(255),40))
        objectCreate(ID,array("text",6,Load_A_Text[3,string],vec2(15,485),vec4(255),15))
        objectCreate(ID,array("text",7,Load_A_Text[4,string],vec2(500,485),vec4(255),14,2))
        LData["TMId",number] = objectCreate(ID,array("text",8,Load_A_Text[5,string],vec2(56,315),vec4(255),20,0)) #loading module
        
        egpRender()
        
        Data["LoadID",number] = ID
        
        timer("FILEReq|arturOS/modules.txt",1)
        timer("loadOS|"+ID+"|0|request_files",1)
    }

    function void open_explorer(){
        local ID = windowCreate()
        local LData = Data["DataWindows",table][ID,table]
        local Load_A_Text = array("sbt 16 19:12",
                                  "menu")
        
        objectCreate(ID,array("box",1,vec2(256,256),vec2(512,512),vec4(0,50,127,255),"gui/center_gradient"))
        objectCreate(ID,array("box",2,vec2(256,15),vec2(512,30),vec4(65,65,65,255)))
        LData["time",number] = objectCreate(ID,array("text",3,Load_A_Text[1,string],vec2(256,3),vec4(255),23,1))
        objectCreate(ID,array("rbox",4,vec2(35,15),vec2(50,20),vec4(127,127,127,255),5))
        objectCreate(ID,array("text",5,Load_A_Text[2,string],vec2(35,7),vec4(255),14,1))
        objectCreate(ID,array("rbox",6,vec2(85,15),vec2(20,20),vec4(127,127,127,255),5))
        objectCreate(ID,array("boxo",7,vec2(85,15),vec2(14,14),vec4(255),1))
        objectCreate(ID,array("box",8,vec2(83,13),vec2(4,2),vec4(255)))
        
        addTrigger(ID,array(4,"OSAPI:open:menu"))
        addTrigger(ID,array(6,"OSAPI:open:console"))
        
        foreach(K:number,T:table = Data["desktop",table]){
            objectCreate(ID,T[1,array])
            addTrigger(ID,array(99+K,"OSAPI:open:"+T[2,string]))
        }
        
        egpRender()
        
        timer("timeOS|"+ID,100)
    }
    
    function void open_console(){
        local ID = windowCreate()
        local Data = Data["DataWindows",table][ID,table]
        local Load_A_Text = array()
        
        objectCreate(ID,array("rbox",1,vec2(0,90),vec2(325,200),vec4(40,40,40,255),5,"",2))
        objectCreate(ID,array("box",2,vec2(256,166),vec2(325,20),vec4(70,70,70,255)))
        objectCreate(ID,array("box",3,vec2(150,0),vec2(15,15),vec4(255),"gui/close_32",2))
        objectCreate(ID,array("text",4,"1",vec2(-155,20),vec4(255),14,0,2))
        objectCreate(ID,array("text",5,"2",vec2(-155,40),vec4(255),14,0,2))
        objectCreate(ID,array("text",6,"3",vec2(-155,60),vec4(255),14,0,2))
        objectCreate(ID,array("text",7,"4",vec2(-155,80),vec4(255),14,0,2))
        objectCreate(ID,array("text",8,"5",vec2(-155,100),vec4(255),14,0,2))
        objectCreate(ID,array("text",9,"6",vec2(-155,120),vec4(255),14,0,2))
        objectCreate(ID,array("text",10,"7",vec2(-155,140),vec4(255),14,0,2))
        objectCreate(ID,array("text",11,"8",vec2(-155,160),vec4(255),14,0,2))
        
        addTrigger(ID,array(1,"OSAPI:focus"))
        addTrigger(ID,array(2,"OSAPI:move"))
        addTrigger(ID,array(3,"OSAPI:close"))
        
        setFocus(ID)
        egpRender()
    }
    
    function void open_store(){
        local ID = windowCreate()
        local Data = Data["DataWindows",table][ID,table]
        local Load_A_Text = array()
        
        #body
        objectCreate(ID,array("rbox",1,vec2(0,135),vec2(256,290),vec4(140,140,140,255),10,"",2))
        objectCreate(ID,array("box",2,vec2(256,106),vec2(256,20),vec4(70,70,70,255)))
        objectCreate(ID,array("box",3,vec2(118,0),vec2(15),vec4(255),"gui/close_32",2))
        objectCreate(ID,array("box",4,vec2(98,253),vec2(50),vec4(255),"gui/html/forward",2))
        objectCreate(ID,array("box",5,vec2(-98,253),vec2(50),vec4(255),"gui/html/back",2))
        
        #content
        local Content = 7
        
        for(I=0,3){
        local IDC = Content+I*4
        objectCreate(ID,array("boxo",IDC,vec2(0,38+(55*I)),vec2(245,50),vec4(255),3,"",2))
        objectCreate(ID,array("boxo",IDC+1,vec2(99,38+(55*I)),vec2(30),vec4(255),3,"",2))
        objectCreate(ID,array("box",IDC+2,vec2(99,38+(55*I)),vec2(25),vec4(255),"vgui/hud/icon_check",2))
        objectCreate(ID,array("text",IDC+3,"App №"+(I+1),vec2(-118,26+(55*I)),vec4(255),25,0,2))
        }
        
        objectCreate(ID,array("text",6,"магазин приложений",vec2(-120,-7),vec4(255),14,0,2)) #в строке состояния
        
        addTrigger(ID,array(1,"OSAPI:focus"))
        addTrigger(ID,array(2,"OSAPI:move"))
        addTrigger(ID,array(3,"OSAPI:close"))
        addTrigger(ID,array(4,"STORE:forwarPage::exitlevel"))
        addTrigger(ID,array(5,"STORE:backPage::exitlevel"))
        
        setFocus(ID)
        egpRender()
    }
    
}

###################---Triggers---###################
if(TRGCLK == "trigger"){
    local API = TRGRES:matchFirst("([^:]*):")
    local Func = TRGRES:matchFirst(":([^:]*)")
    local Arg = TRGRES:matchFirst("[^:]*:[^:]*:([^:]*)"):explode("|")
    
    if(API == "STORE"){
        switch(Func){
            case "",
            break
        }
    }
}

###################---SystemLoopTimer---###################
if(CLK == "loadOS"){    
    local LData = Data["DataWindows",table][CLKID,table]
    local ProcessBarID = LData["PBId",number]
    local TextModuleID = LData["TMId",number]
    local Loading = CLKARG:string(3):toNumber()
    local ID = CLKARG:string(2):toNumber()
    local Text = CLKARG:string(4)
    
    EGP:egpPos(ProcessBarID,vec2(56,300)+vec2(2,0)*Loading)
    EGP:egpSize(ProcessBarID,vec2(0,25)+vec2(4,0)*Loading)
    EGP:egpSetText(TextModuleID,Text)
    
    if(Loading >= 100){
        Save["loadingStatus_"+owner():id(),table] = table()
        Data["loaded",number] = 1
        
        LData:unset("PBId")
        LData:unset("TMId")
        Data:unset("LoadID")
        
        windowDelete(CLKID)
        open_explorer()
        
        exit()
    }
    
    if(Text == "loading..."){ timer("loadOS|"+ID+"|"+(Loading+1)+"|"+Text,1) }
}

if(CLK == "timeOS"){
    timer(clkName(),1000)
    
    local Window = Data["Windows",table][CLKID,table]
    local TimeID = Data["DataWindows",table][CLKID,table]["time",number]
    
    if(!Data["loaded",number]){
        stoptimer(clkName())
        exit()
    }
    
    local UTC = dateUTC(time()+11*60*60)
    local WDay = array("Вс","Пн","Вт","Ср","Чт","Пт","Сб")
    local Time = WDay[UTC["wday",number],string]+" "+UTC["day",number]+" "+(UTC["hour",number] < 10 ? "0" : "")+UTC["hour",number]+":"+(UTC["min",number] < 10 ? "0" : "")+UTC["min",number]
    
    
    Window[3,array][3,string] = Time
    EGP:egpSetText(TimeID,Time)
}
